;-*-lisp-*-
;-*- coding: utf-8 -*-
;;;; ============================================================================================
;;;; StumpWM-RC-Datei
;;;; Version 0.23
;;;; mit loadrc im colon neu laden, oder, wenn eine Vorgängerversion von ihr bereits geladen ist,
;;;; mit prefix-x R neu einlesen nach einer Änderung
;;;; ============================================================================================
(in-package :stumpwm)

;; ----------------------------------------------------------
;; DIESE 4 ZEILEN ANPASSEN!!!
;; Mein Pfad zu den Contrib-Dateien kann von eurem abweichen!
(load "~/Entwicklung/lisp/stumpwm/contrib/sbclfix")
(load "~/Entwicklung/lisp/stumpwm/contrib/net")
(load "~/Entwicklung/lisp/stumpwm/contrib/cpu")
(load "~/Entwicklung/lisp/stumpwm/contrib/mem")
;; ----------------------------------------------------------

;; ======================================
;; Initialisierung der globalen Variablen
;; ======================================

(defparameter *browser* "conkeror "
  "*browser* enthält den aktuell genutzten Standardbrowser")

(defparameter *uxthema* "exec uxterm -fg lavender -bg maroon4"
  "*uxthema* enthält ein Farbthema für das Terminal, angepasst an Ubuntu 12.04 LTS. Die Farben wurden ausgesucht anhand von http://http://critical.ch/xterm/")

(defparameter *uxt* "uxterm -fg lavender -bg maroon4 -class 'Userterminal'"
  "*uxt* enthält ein Farbthema für das Terminal, angepasst an Ubuntu 12.04 LTS")

(defparameter *uxt-neu* "uxterm -fg lavender -bg maroon4"
  "*uxt* enthält ein Farbthema für das Terminal, angepasst an Ubuntu 12.04 LTS")

(defparameter *systerm* "exec uxterm -fg gainsboro -bg OrangeRed -class 'Admin-uxterm' -e 'sudo -i'"
  "*systerm* speichert eine Umgebung für ein Terminal mit Administratorrechten")

(defvar *dropbox-zustand* 'eingeschaltet
  "*dropbox-zustand* enthält den Betriebszustand des DropBox-Dienstes")

(defvar *i2p-zustand* 'unbestimmt
  "*i2p-zustand* enthält den Zustand ob i2p betrieben wird")

(defvar *touchpad-zustand* 'ausgeschaltet
  "*touchpad-zustand* enthält die Information, ob das Touchpad eingeschaltet oder ausgeschaltet ist")

;; -------------------------------------------------------------
;; emacs-artige Tastenbedienung mit Präfix - *programmstart-map*
;; -------------------------------------------------------------

(defparameter *programmstart-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "Print") "exec scrot -d 5 -e 'mv $f ~/Bilder/Bildschirmfotos/ 2>/dev/null'")
    (define-key m (kbd "a")   "alsamixer")
    (define-key m (kbd "A")   "abook ")
    (define-key m (kbd "C-a") "audacious")
    (define-key m (kbd "C-A") "exec avidemux2_gtk")
    (define-key m (kbd "b")   "banshee")
    (define-key m (kbd "c")   "conkeror")
    (define-key m (kbd "C")   "chromium-browser")
    (define-key m (kbd "C-c") "cherrytree")
    (define-key m (kbd "C-C") "calibre")
    (define-key m (kbd "d")   "deluge")
    (define-key m (kbd "D")   "dropbox-umschalten")
    (define-key m (kbd "e")   "evince")
    (define-key m (kbd "f")   "firefox")
    (define-key m (kbd "F")   "focuswriter")
    (define-key m (kbd "g")   "geeqie")
    (define-key m (kbd "G")   "gimp")
    (define-key m (kbd "h")   "htop")
    (define-key m (kbd "i")   "exec iscan")
    (define-key m (kbd "I")   "i2p-umschalten")
    (define-key m (kbd "j")   "jumanji")
    (define-key m (kbd "k")   "keepassx")
    (define-key m (kbd "K")   "kaffeine")
    (define-key m (kbd "C-k") "exec k3b")
    (define-key m (kbd "m")   "mc")
    (define-key m (kbd "M")   "mocp")
    (define-key m (kbd "C-m") "minitube")  
    (define-key m (kbd "C-M") "mathomatic")
    (define-key m (kbd "n")   "nautilus")
    (define-key m (kbd "N")   "nitrogen")
    (define-key m (kbd "o")   "okular")
    (define-key m (kbd "p")   "exec dmenu_run")
    (define-key m (kbd "P")   "exec pyroom")
    (define-key m (kbd "r")   "ristretto")
    (define-key m (kbd "R")   "reinit")
    (define-key m (kbd "s")   "scribus")
    (define-key m (kbd "S")   "surf")
    (define-key m (kbd "t")   "thunderbird")
    (define-key m (kbd "T")   "turpial")
    (define-key m (kbd "C-t")  "ttytter")
    (define-key m (kbd "u")   "unison-gtk")
    (define-key m (kbd "v")   "vlc")
    (define-key m (kbd "V")   "vym")
    (define-key m (kbd "C-v") "exec xvidcap")
;    (define-key m (kbd "w")   "wicd-curses")
    (define-key m (kbd "x")   "xchat")
    (define-key m (kbd "X")   "xarchiver")
    (define-key m (kbd "y")   "touchpad-umschalten")
    (define-key m (kbd "z")   "zathura")
    m))

;; --------------------------------------------------------
;; emacs-artige Tastenbedienung mit Präfix - *websuche-map*
;; --------------------------------------------------------

(defparameter *websuche-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "a") "askubuntu")
    (define-key m (kbd "b") "news-bbc")
    (define-key m (kbd "d") "ddg")
    (define-key m (kbd "g") "google")
    (define-key m (kbd "G") "news-guardian")
    (define-key m (kbd "h") "hackernews")
    (define-key m (kbd "i") "ixquick")
    (define-key m (kbd "I") "imdb-suche")
    (define-key m (kbd "m") "google+mitteilungen")
    (define-key m (kbd "M") "memory-alpha")
    (define-key m (kbd "n") "nachrichten")
    (define-key m (kbd "o") "open-selection-browser")
    (define-key m (kbd "m") "google+mitteilungen")
    (define-key m (kbd "p") "google+profile")
    (define-key m (kbd "r") "news-register")
    (define-key m (kbd "s") "stackoverflow")
    (define-key m (kbd "T") "telecomix")
    (define-key m (kbd "t") "ttytter")
    (define-key m (kbd "u") "browse-url")
    (define-key m (kbd "w") "wikipedia")
    (define-key m (kbd "y") "youtube-suche")
    (define-key m (kbd "z") "zwitschere")
    m))

;; --------------------------------------------------------
;; emacs-artige Tastenbedienung mit Präfix - *erholung-map*
;; --------------------------------------------------------

(defparameter *erholung-map*
  (let ((m (make-sparse-keymap)))
     (define-key m (kbd "a")   "exec adv770")
     (define-key m (kbd "A")   "exec asciiportal")
     (define-key m (kbd "C-a") "aliensrl")
     (define-key m (kbd "b")   "exec wesnoth --smallgui")
     (define-key m (kbd "B")   "brogue")
     (define-key m (kbd "c")   "crawl")
     (define-key m (kbd "d")   "exec desmume-glade")
     (define-key m (kbd "D")   "dwarffortress")
     (define-key m (kbd "C-d") "exec dwarftherapist")
     (define-key m (kbd "C-D") "doomrl")
     (define-key m (kbd "f")   "flands")
     (define-key m (kbd "F")   "flare")
     (define-key m (kbd "C-f") "exec freedroidRPG")
     (define-key m (kbd "h")   "exec hitchhikersguide")
     (define-key m (kbd "l")   "exec scummvm")
     (define-key m (kbd "m")   "exec java -jar minecraft.jar")
     (define-key m (kbd "C-M") "moria")
     (define-key m (kbd "C-m") "exec mangband")
     (define-key m (kbd "M")   "exec minutor")
     (define-key m (kbd "p")   "palapelli")
     (define-key m (kbd "P")   "worldofpadman")
     (define-key m (kbd "C-p") "pouetChess")
     (define-key m (kbd "C-P") "pychess")
     (define-key m (kbd "r")   "rogue")
     (define-key m (kbd "s")   "scid")
     (define-key m (kbd "C-S") "exec stella")
     (define-key m (kbd "S")   "exec supertuxkart")
     (define-key m (kbd "C-s") "exec scummvm")
     (define-key m (kbd "t")   "exec tome")
     (define-key m (kbd "T")   "exec tome4")
     (define-key m (kbd "v")   "exec gvbam")
     (define-key m (kbd "w")   "exec warmux")
     (define-key m (kbd "W")   "exec widelands")
     (define-key m (kbd "C-w") "worldofpadman")
     (define-key m (kbd "x")   "xorcurses")
     (define-key m (kbd "X")   "exec xskat")
     (define-key m (kbd "z")   "exec zsnes")
     (define-key m (kbd "1")   "zork1")
     (define-key m (kbd "2")   "zork2")
     (define-key m (kbd "3")   "zork3")
     m))

;; ======================================================================================================
;; *start-menü* - ein grafisches Auswahl-Menü; die Struktur hatte ehemals eine Abstimmung mit den Gruppen
;; ======================================================================================================

(defparameter *start-menü*
  `(

    ("Arbeiten"
     ("Adressbuch               prefix-x A"   "abook")
     ("Calibre                  prefix-x C-C" "calibre")
     ("Cherrytree               prefix-x C-c" "cherrytree")
     ("Evince                   prefix-x e"   "evince")
     ("Emacs                    prefix-e"     "emacs")
     ("FB-Reader"                             "fbreader")
     ("FocusWriter              prefix-x F"   "focuswriter")
     ("GIMP                     prefix-x G"   "gimp")
     ("Idle - Python 3.2"                     "idle-python3.2")
     ("LibreOffice-Startcenter"               "loffice")
     ("LibreOffice-Math"                      "lomath")
     ("Mathomatic               prefix-x C-M" "mathomatic")
     ("Okular                   prefix-x o"   "okular")
     ("PyRoom                   prefix-x P"   "pyroom")
     ("Scribus                  prefix-x s"   "scribus")
     ("Scanner                  prefix-x i"   "iscan")
     ("ViewYourMind             prefix-x V"   "vym")
     ("Zathura                  prefix-x z"   "zathura")
    )

    ("Clouddienste"
     ("Dropbox ein-/ausschalten   prefix-x D" "dropbox-umschalten")
     ("DropBox Webseite"                      ,(concatenate 'string "exec " *browser* "https://dropbox.com"))
     ("UbuntuOne Steuerpult"                  "ubuntuone-control-panel-qt")
     ("UbuntuOne Webseite"                    ,(concatenate 'string "exec " *browser* "https://one.ubuntu.com"))
    )
   
    ("Erholung"
     ("Adventure 770        prefix-X a"   "adv770")
     ("Aliens RL            prefix-X C-a" "aliensrl")
     ("ASCII-Portal         prefix-X A"   "asciiportal")
     ("Battle for Wesnoth   prefix-X b"   "wesnoth --smallgui")
     ("B-Rogue              prefix-X B"   "brogue")
     ("Comix"                             "comix")
     ("Crawl                prefix-X c"   "crawl")
     ("Desmume              prefix-X d"   "desmume-glade")
     ("Doom RL              prefix-X C-D" "doomrl")
     ("Dwarffortress        prefix-X D"   "dwarffortress")
     ("DwarfTherapist       prefix-X C-d" "dwarftherapist")
     ("Fabled Lands App     prefix-X f"   "flands")
     ("Flare RPG            prefix-X F"   "flare")
     ("Freedroid-RPG        prefix-X C-f" "freedroidRPG")
     ("Hitchhikers Guide    prefix-X h"   "hitchhikersguide")
     ("Minecraft            prefix-X m"   "java -jar minecraft.jar")
     ("Minutor              prefix-X M"   "minutor")
     ("MiniTube             prefix-x M"   "minitube")
     ("Moria                prefix-X C-M" "moria")
     ("Multiplayer-Angband  prefix-X C-m" "mangband")
     ("Palapelli            prefix-X p"   "palapelli")
     ("Pouet-Chess 3D       prefix-X C-p" "pouetChess")
     ("Prime RL             prefix-X P"   "primerl")
     ("PyChess Staunton     prefix-X C-P" "pychess")
     ("Rogue                prefix-X r"   "rogue")
     ("Scid vs. PC          prefix-X s"   "scid")
     ("S.C.U.M.M.-VM        prefix-X C-s" "scummvm")
     ("STella               prefix-X C-S" "stella")
     ("Supertux-Kart        prefix-X S"   "supertuxkart")
     ("T.O.M.E. 2           prefix-X t"   "tome")
     ("T.O.M.E. 4           prefix-X T"   "tome4")
     ("VisualBoy Advanced m prefix-X v"   "gvbam")
     ("Warmux               prefix-X w"   "warmux")
     ("Widelands            prefix-X W"   "widelands")
     ("World of Padman      prefix-X C-w" "wop")
     ("XorCurses            prefix-X x"   "xorcurses")
     ("X-Skat               prefix-X X"   "exec xskat")
     ("Zork 1               prefix-X 1"   "zork1")
     ("Zork 2               prefix-X 2"   "zork2")
     ("Zork 3               prefix-X 3"   "zork3")
     ("ZSNES                prefix-X z"   "zsnes")
    )
    
    ("Lisp & StumpWM"
     ("CL User"                                    ,(concatenate 'string "exec " *browser* "http://www.cl-user.net"))
     ("Common Lisp"                                ,(concatenate 'string "exec " *browser* "http://common-lisp.net/"))
     ("Common Lisp Hyperspec"                      ,(concatenate 'string "exec " *browser* "http://www.lispworks.com/documentation/HyperSpec/Front/index.htm"))
     ("Common Lisp Wiki"                           ,(concatenate 'string "exec " *browser* "http://www.cliki.net/index"))
     ("Debugstufe umschalten                   prefix-x C-d"   "debuggen-umschalten")
     ("Denksport: 99 Lisp Probleme"                ,(concatenate 'string "exec " *browser* "http://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html"))
     ("ELM-Art Lisp Tutor (Deutsch/English)"       ,(concatenate 'string "exec " *browser* "http://art2.ph-freiburg.de/art/login-d.html"))
     ("Graham's On Lisp Book"                      ,(concatenate 'string "exec " *browser* "http://www.paulgraham.com/onlisptext.html"))
     ("L1sp"                                       ,(concatenate 'string "exec " *browser* "http://l1sp.org"))
     ("Lambkins Successful Lisp Book"              ,(concatenate 'string "exec " *browser* "http://psg.com/~dlamkins/sl/cover.html"))
     ("Lisp-Forum"                                 ,(concatenate 'string "exec " *browser* "http://www.lispforum.com"))
     ("Planet LISP"                                ,(concatenate 'string "exec " *browser* "http://planet.lisp.org"))
     ("Planet SBCL"                                ,(concatenate 'string "exec " *browser* "http://planet.sbcl.org"))
     ("Quicklisp Blog & News"                      ,(concatenate 'string "exec " *browser* "http://blog.quicklisp.org/"))
     ("Rosetta Code"                               ,(concatenate 'string "exec " *browser* "http://rosettacode.org/wiki/Category:Common_Lisp"))
     ("Seibel's Practical Common Lisp Book"        ,(concatenate 'string "exec " *browser* "http://gigamonkeys.com/book/"))
     ("Steele's CL the Language, 2nd Ed. Book"     ,(concatenate 'string "exec " *browser* "http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html"))
     ("StumpWM Homepage"                           ,(concatenate 'string "exec " *browser* "http://stumpwm.org"))
     ("StumpWM Wiki"                               ,(concatenate 'string "exec " *browser* "http://stumpwm.svkt.org/cgi-bin/wiki.pl"))
     ("Touretzky's Common Lisp Book"               ,(concatenate 'string "exec " *browser* "http://www.cs.cmu.edu/~dst/LispBook/"))
     ("Wikibook: Common Lisp"                      ,(concatenate 'string "exec " *browser* "https://en.wikibooks.org/wiki/Common_Lisp"))
    )
    
    ("Media"
     ("Audacious           prefix-x C-a" "audacious")
     ("AviDeMux            prefix-x C-A" "avidemux2_gtk")
     ("Banshee             prefix-x b"   "banshee")
     ("Comix"                            "comix")     
     ("Geeqie              prefix-x g"   "geeqie")
     ("K3b Burner          prefix-x C-k" "k3b")
     ("Kaffeine            prefix-x K"   "kaffeine")
     ("MiniTube            prefix-x C-m" "minitube")
     ("Music on Console    prefix-x m"   "mocp")
     ("Ristretto           prefix-x r"   "ristretto")
     ("TV-Browser          "             "tvbrowser")
     ("VideoLan-Client     prefix-x v"   "vlc")
     ("XVidCap Screencast  prefix-x C-v" "xvidcap")
    )

    ("Soziale Netzwerke"
     ("Diaspora*"                          ,(concatenate 'string "exec " *browser* "https://joindiaspora.com/stream"))
     ("Google+                 prefix-y m" "google+mitteilungen")
     ("i2p-Netzwerk ein/aus    prefix-x I" ,(concatenate 'string "exec " *browser* "http://127.0.0.1:7657"))
     ("identi.ca"                          ,(concatenate 'string "exec " *browser* "https://identi.ca"))
     ("Mitteilung zwitschern   prefix-y z" "zwitschern")
     ("Telecomix"                          ,(concatenate 'string "exec " *browser* "https://status.telecomix.org"))
     ("Twitter"                            ,(concatenate 'string "exec " *browser* "https://twitter.com"))
     ("Turpial Twitterclient   prefix-x T" "turpial")
     ("X-Chat IRC-Netz         prefix-x x" "xchat")     
    )
    
    ("System"
     ("Event-Anzeiger XEV"                     "xev")
     ("GParted"                                "gksudo gparted")
     ("GPG-Crypter"                            "gpg-crypter")
     ("Htop                      prefix-x h"   "htop")
     ("KeePassX                  prefix-x k"   "keepassx")
     ("Midnight Commander        prefix-x m"   "mc")
     ("UnetBootin"                             "gksudo unetbootin")
     ("Unison                    prefix-x u"   "unison-gtk")
     ("WICD (curses)             prefix-x w"   "wicd-curses")
     ("XArchiver                 prefix-x X"   "xarchiver")
     ("XFontSel"                               "xfontsel")
    )

    ("Webseiten"
     ("URL direkt ansteuern     prefix-y u"  "browse-url")
     ("BBC Nachrichten          prefix-y b"  "news-bbc")
     ("Blottr Breaking-News"                 ,(concatenate 'string "exec " *browser* "http://blottr.com"))
     ("Conkeror für Debian"                  ,(concatenate 'string "exec " *browser* "http://noone.org/conkeror-nightly-debs/"))
     ("Conkeror Homepage"                    ,(concatenate 'string "exec " *browser* "http://conkeror.org"))
     ("Detektiv Conan"                       ,(concatenate 'string "exec " *browser* "http://detektiv-conan.ch"))
     ("DuckDuckGo               prefix-y d"  "ddg")
     ("Dwarf Fortress Wiki"                  ,(concatenate 'string "exec " *browser* "http://df.magmawiki.com"))
     ("EDXonline Lernplattform"              ,(concatenate 'string "exec " *browser* "http://www.edxonline.org"))
     ("Fabled Lands App"                     ,(concatenate 'string "exec " *browser* "http://flapp.sourceforge.net/"))
     ("Fighting Fantasy"                     ,(concatenate 'string "exec " *browser* "http://fightingfantasy.com/"))
     ("Fighting Fantasy Project"             ,(concatenate 'string "exec " *browser* "http://www.ffproject.com/"))
     ("FreshPorts"                           ,(concatenate 'string "exec " *browser* "http://freshports.org"))
     ("Full Circle Magazine"                 ,(concatenate 'string "exec " *browser* "http://fullcirclemagazine.org"))
     ("GitHUB"                               ,(concatenate 'string "exec " *browser* "https://github.com"))
     ("Google                   prefix-y g"  "google")
     ("Gronkh"                               ,(concatenate 'string "exec " *browser* "http://gronkh.de"))
     ("Hackernews               prefix-y h"  "hackernews")
     ("Heise"                                ,(concatenate 'string "exec " *browser* "http://heise.de"))
     ("I.M.D.B.                 prefix-y I"  "imdb-suche")
     ("IxQuick                  prefix-y i"  "ixquick")
     ("LEO EN-DE"                            ,(concatenate 'string "exec " *browser* "http://leo.org"))
     ("Lernu Esperanto"                      ,(concatenate 'string "exec " *browser* "http://lernu.net"))
     ("Memory Alpha             prefix-y M"  "memory-alpha")
     ("Minecraft Wiki"                       ,(concatenate 'string "exec " *browser* "http://www.minecraftwiki.net"))
     ("Nachrichten              prefix-y n"  "nachrichten")
     ("OMG! Ubuntu"                          ,(concatenate 'string "exec " *browser* "http://omgubuntu.co.uk"))
     ("Revo Vortaro EO"                      ,(concatenate 'string "exec " *browser* "http://reta-vortaro.de"))
     ("Sonja Vortaro EO"                     ,(concatenate 'string "exec " *browser* "http://kisa.ca/vortaro"))
     ("Stackoverflow            prefix-y s"  "stackoverflow")
     ("SubCentral"                           ,(concatenate 'string "exec " *browser* "http://subcentral.de"))
     ("Thalia"                               ,(concatenate 'string "exec " *browser* "http://thalia.de"))
     ("The Guardian             prefix-y G"  "news-guardian")
     ("The Register             prefix-y r"  "news-register")
     ("Titannica - FF wiki"                  ,(concatenate 'string "exec " *browser* "http://fightingfantasy.wikia.com/wiki/Fighting_Fantasy"))
     ("TOR check"                            ,(concatenate 'string "exec " *browser* "https://check.torproject.org"))
     ("Webupd8"                              ,(concatenate 'string "exec " *browser* "http://webupd8.org"))
     ("Wikipedia                prefix-y w"  "wikipedia")
     ("YouTube                  prefix-y y"  "youtube-suche")
     ("ZenCast"                              ,(concatenate 'string "exec " *browser* "http://zencast.org"))
    )

    ("WWW-Programme"
     ("Chromium     prefix-x C"   "chromium-browser")
     ("Claws-Mail"                "claws-mail")
     ("Conkeror     prefix-x c"   "conkeror")
     ("Deluge       prefix-x d"   "deluge")
     ("dwb"                       "dwb")
     ("Firefox      prefix-x f"   "firefox")
     ("Iceweasel    prefix-x i"   "iceweasel")
     ("Jumanji      prefix-x j"   "jumanji")
     ("MiniTube     prefix-x C-m" "minitube")
     ("Mutt"                      "mutt")
     ("Surf         prefix-x S"   "surf")
     ("Telecomix    prefix-y t"   "telecomix")
     ("Thunderbird  prefix-x t"   "thunderbird")
     ("Turpial      prefix-x T"   "turpial")
     ("Twitter      prefix-y t"   "ttytter")
     ("X-Chat       prefix-x x"   "xchat")
    )
    
    ("Admin-Terminal                  prefix C-c"    "adminterminal")
    ("Archiv-Manager"                                "file-roller")
    ("Ask Ubuntu                      prefix-y a"    ,(concatenate 'string "exec " *browser* "http://askubuntu.com"))
    ("Benutzer-Terminal               prefix M-c"    "userterminal")
    ("Browser starten                 BROWSER-Taste" ,(concatenate 'string "exec " *browser*))
    ("Byobu-Terminal                  prefix c"      "byobu")
    ("Dateimanager                    prefix-x n"    "nautilus")
    ("Emacs                           prefix-e"      "emacs")
    ("Email                           EMAIL-Taste"   "thunderbird")
    ("GetDeb"                                        ,(concatenate 'string "exec " *browser* "http://getdeb.net"))
    ("Hintergrundbild ändern          prefix-x N"    "nitrogen")
    ("Kurzmitteilungsdienste"                        "gwibber")
    ("Launchpad"                                     ,(concatenate 'string "exec " *browser* "https://launchpad.net"))
    ("Lautstärke regeln               prefix-x a"    "alsamixer")
    ("LibreOffice-Calc"                              "localc")
    ("LibreOffice-Draw"                              "lodraw")
    ("LibreOffice-Impress"                           "loimpress")
    ("LibreOffice-Writer"                            "lowriter")
    ("Medienabspieler"                               "rhythmbox")
    ("Nachrichtendienste"                            "empathy")
    ("Netzwerkverbindung bearbeiten"                 "nm-connection-editor")
    ("Planet Ubuntu"                                 ,(concatenate 'string "exec " *browser* "http://planet.ubuntu.com"))
    ("PlayDeb"                                       ,(concatenate 'string "exec " *browser* "http://playdeb.net"))
    ("Software aktualisieren"                        "update-manager")
    ("StumpWM beenden"                               "quit")
    ("StumpWM-Konfiguration neu laden"               "reinit")
    ("Synaptic Paketmanager"                         "exec gksudo synaptic")
    ("Taschenrechner                  CALC-Taste"    "speedcrunch")
    ("Touchpad ein/aus                prefix-x y"    "touchpad-umschalten")
    ("Ubuntu Software-Center"                        "software-center")
    ("Ubuntu Webseite"                               ,(concatenate 'string "exec " *browser* "http://ubuntu.com"))
    ("UbuntuOne Steuerpult"                          "ubuntuone-control-panel-qt")
    ("Ubuntuusers Deutschland"                       ,(concatenate 'string "exec " *browser* "http://ubuntuusers.de"))
    ("Ubuntu-Tweak"                                  "exec ubuntu-tweak")
    ("Ubuntu-Tweak Webseite"                         ,(concatenate 'string "exec " *browser* "http://ubuntu-tweak.com"))
    ("Übersicht aller Kommandos       prefix C"      "commands")
))

;; ======================================
;; Neubesetzung von vorhandenen Variablen
;; ======================================

(set-prefix-key (kbd "Menu")) ; set-prefix-key stellt die Präfix-Taste um. Statt C-t, wird nun die Menütaste benutzt.

(set-font "-*-terminus-medium-r-normal-*-12-*-*-*-*-*-*-1") ; set-font stellt den Standardzeichensatz ein.

;; Ubuntu 12.04 LTS Thema
(set-focus-color      "orange")
(set-unfocus-color    "black")
(set-win-bg-color     "gainsboro")
(set-fg-color         "maroon4")
(set-bg-color         "gainsboro")

;; Grey-Blue Arch Linux Thema
					;(set-focus-color      "DodgerBlue")
					;(set-unfocus-color    "black")
					;(set-win-bg-color     "grey25")
					;(set-fg-color         "DodgerBlue")
					;(set-bg-color         "grey25")

;; Lightblue Fedora Thema
					;(set-focus-color      "lightblue")
					;(set-unfocus-color    "black")
					;(set-win-bg-color     "darkblue")
					;(set-fg-color         "lightblue")
					;(set-bg-color         "darkblue")

(setq *time-format-string-default* "%A %B %e %k:%M:%S")

(setq *time-modeline-string* "%a %b %e %k:%M:%S")

(setq *time-month-names*
      #("Januar" "Februar" "März" "April" "Mai" "Juni" "Juli" "August"
	"September" "Oktober" "November" "Dezember"))

(setq *time-day-names*
      #("Montag" "Dienstag" "Mittwoch" "Donnerstag" "Freitag" "Samstag" "Sonntag"))

(setq *mouse-focus-policy* :click) ; Ändert das Verhalten des Mauszeigers

(setq *startup-message* "^2*Willkommen zum ^BStump^b ^BW^bindow ^BM^banager!
Drücke ^5*~a ?^2* für Hilfe.") ; personalisierte Begrüssungsnachricht

;; --------------------------
;; Ein Ersatz *help-map* Menü
;; --------------------------

(setf *help-map*
          (let ((m (make-sparse-keymap)))
	    (define-key m (kbd "m") "man")
	    (define-key m (kbd "c") "describe-command")
	    (define-key m (kbd "f") "describe-function")
	    (define-key m (kbd "k") "describe-key")
            (define-key m (kbd "v") "describe-variable")
	    (define-key m (kbd "w") "where-is")
            m))

;; -----------------------
;; Die angepasste Modeline
;; -----------------------

;; Vorbereitungen für das Modeline-Verhalten
(setf *mode-line-background-color*      "OrangeRed" ; "Grey18"
      *mode-line-foreground-color*      "gainsboro" ; "DodgerBlue"
      *mode-line-border-color*          "gainsboro" ; "CornflowerBlue"
      *mode-line-timeout*               1
      *mode-line-position*              :top
      *time-format-string-default*      "%a %d.%m.%Y %I:%M%p"
      *time-modeline-string*            "%a %d.%m.%Y %I:%M%p"
      *group-format*                    "%n%s%t"
      *window-format*                   "«%n%s%m%10c»")

;; Modeline zeigt Zeit in lokalem Format, CPU-Nutzung, Netzwerk-Verkehr, Gruppe, Notifikation und aktuellen Rahmen
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%c '|tr -d '[:cntrl:]' && uptime | sed 's/.*: //; s/,//g'|tr -d '[:cntrl:]'" t))   " %t %c %M %l [^B%n^b] %W"))

;; ===================
;; Autostart-Programme
;; ===================
(when *initializing*
  (run-or-raise "nitrogen --restore" '(:class "Nitrogen")) ; Hintergrund einstellen
  (run-or-raise "synclient touchpadoff=1" '(:class "Synclient")) ; Touchpad ausschalten
  (run-or-raise "xscreensaver -no-splash" '(:class "Xscreensaver")) ; Bildschirmschoner mit Sperrfunktion
  (run-or-raise "nm-applet" '(:class "Nm-applet")) ; Network-Manager Applet
  (run-or-raise "ubuntuone-launch" '(:class "Ubuntuone")) ; UbuntuOne starten
  (run-or-raise "dropbox start" '(:class "Dropbox")) ; Dropbox starten
  (banish-pointer) ; Mauszeiger verbannen
  (clear-window-placement-rules))

(if (not (head-mode-line (current-head))) ; Die Modeline einschalten, falls sie es noch nicht ist
    (toggle-mode-line (current-screen) (current-head)))

;; ========================
;; Neue Befehle - Vorarbeit
;; ========================

(defun cat (&rest strings)
  "(cat &rest strings)
CAT bietet ein Kürzel für (concatenate 'string foo bar {baz ...})."
  (apply 'concatenate 'string strings))

(defun ersetze-teilstring (string alt neu &key (test #'char=))
  "(ersetze-teilsting string alt neu)
ERSETZTE-TEILSTRING ersetzt das Teilstück ALT durch NEU."
  (with-output-to-string (ausgabe)
    (loop with alt-länge = (length alt)
       for alte-position = 0 then (+ position alt-länge)
       for position = (search alt string
                              :start2 alte-position
                              :test test)
       do (write-string string ausgabe
			:start alte-position
			:end (or position (length string)))
       when position do (write-string neu ausgabe)
       while position))) 

(defmacro neuerbefehl (name dokstring befehl klasse)
  `(defcommand ,name () () ,dokstring
	       (message ,dokstring)
	       (run-or-raise ,befehl '(:class ,klasse))))

(defmacro neuerterminalbefehl (name dokstring befehl klasse &optional (fg "lavender") (bg "maroon4"))
	    "Starte/wechsle zu Alsa-Mixer."
	    `(neuerbefehl ,name ,dokstring (format nil "uxterm -fg ~A -bg ~A -class '~A' -e '~A'"
					       ,fg ,bg ,klasse ,befehl) ,klasse))

(defun string->liste (string)
  (read-from-string (concatenate 'string "(" string ")")))

(defmacro tastenbindung (keymap taste befehl)
  "Kurzes Macro, um eine Tastenbindung zu definieren"
  `(define-key, keymap (kbd, taste), befehl))

(defmacro tastaturbelegung (keymap &rest tasten)
  "Kurzes Macro, um mehrere Tastenbindungen an eine Keymap zu definieren, verwendet pro Taste die Funktion tastenbindung"
  (let ((ks (mapcar (lambda (k)
		      (append (list 'tastenbindung keymap) k))
		    tasten)))
    `(progn ,@ks)))

(defun uhrzeit () "Gibt die aktuelle Uhrzeit zurück"
       (multiple-value-bind (sekunden minuten stunden) (get-decoded-time)
	 (format nil "~2,1,0,'0@A:~2,1,0,'0@A:~2,1,0,'0@A" stunden minuten sekunden)))

(defun datum-uhrzeit ()
  "(datum-uhrzeit)
DATUM-UHRZEIT gibt das heutige Datum und die aktuelle Uhrzeit des Systems zurück."
  (multiple-value-bind (sekunden minuten stunden tag monat jahr) (get-decoded-time)
    (format nil "~2,'0D.~2,'0D.~4,'0D ~2,'0D:~2,'0D:~2,'0D" tag monat jahr stunden minuten sekunden)))

;; ===========================================
;; Spezialisierte defcommands / Ausgabebefehle
;; ===========================================

(defcommand askubuntu (suche)
  ((:string "Suche in Ask Ubuntu nach: "))
  "Dient zur Suche bei Ask Ubuntu per Conkeror. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://askubuntu.com/search?q=" suche)))

(defcommand ausführen-im-terminal (befehl) ((:string "Befehl: "))
  (run-shell-command (format nil "~A -e ~A" *uxt-neu* befehl)))

(defcommand browse-url (url)
  ((:string "Wie lautet die gewünschte URL? "))
  "Dient zum ansurfen einer beliebigen URL."
  (check-type url string)
  (run-shell-command (cat *browser* url)))

(defcommand ddg (suche)
  ((:string "Suche in DuckDuckGo nach: "))
  "Dient zur Suche bei DuckDuckGo per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "https://duckduckgo.com/?q=" suche)))

(defcommand debuggen-umschalten () ()
	    "Schaltet das Debugging ein oder aus"
	    (cond ((= *debug-level* 0)
		   (redirect-all-output (data-dir-file "debug-output" "txt"))
		   (setq *debug-level* 1)
		   (message "Debugging wurde eingeschaltet."))
		  (t (setq *debug-level* 0)
		     (message "Debugging wurde ausgeschaltet."))))

(defcommand dropbox-umschalten () ()
	    "Schaltet den Dropbox-Dienst um zwischen eingeschaltet und ausgeschaltet"
	    (case *dropbox-zustand*
	      ((eingeschaltet)
	       (or (and (y-or-n-p "Soll Dropbox ausgeschaltet werden? ")
			(setq *dropbox-zustand* 'ausgeschaltet)
			(run-shell-command "dropbox stop")
			(message "Dropbox ist ausgeschaltet worden."))
		   (message "Dropbox ist NICHT ausgeschaltet worden.")))
	      (otherwise
	       (setq *dropbox-zustand* 'eingeschaltet)
	       (run-shell-command "dropbox start")
	       (message "Dropbox ist eingeschaltet worden."))))

(defcommand echo-date () ()
	    "(echo-date)
ECHO-DATE stellt das Datum und die Uhrzeit dar.
Beispiel: (echo-date) => 11.01.2012 06:09:43"
	    (message "~a" (datum-uhrzeit)))

(defcommand echo-time () ()
	    "(echo-date)
ECHO-DATE stellt die Uhrzeit dar.
Beispiel: (echo-time) => 06:11:27"
	    (message "~a" (uhrzeit)))

(defcommand google (suche)
  ((:string "Suche in Google nach: "))
  "Dient zur Suche in Google per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "https://www.google.de/search?q=" suche)))

(defcommand google+mitteilungen (suche)
  ((:string "Suche in Google+ Mitteilungen nach: "))
  "Dient zur Suche in Google+ Mitteilungen per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "'https://www.google.de/search?q=site:plus.google.com inurl:posts/* " suche "'" )))

(defcommand google+profile (suche)
  ((:string "Suche in Google+ Profilen nach: "))
  "Dient zur Suche in Google+ Profilen per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "'https://www.google.de/search?q=" suche "&tbs=prfl:e'")))

(defcommand gselect-oder-gnew (gruppen-nummer) ((:number "Gruppen-Nummer: "))
  (gselect
   (or (select-group (current-screen) (format nil "~A" gruppen-nummer) )
       ; Die Auswahl der Gruppe schlug fehl, da sie nicht existiert, also erschaffen wir sie
       (let ((gruppe (add-group (current-screen)
			       (format nil "unbenannt~A" gruppen-nummer))))
	 (setf (group-number gruppe) gruppen-nummer)
	 gruppe))))

(defcommand hackernews (suche)
  ((:string "Suche bei Hackernews nach: "))
  "Dient zur Suche bei Hackernews per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://www.google.com/search?q=site:news.ycombinator.com+" suche)))

(defcommand i2p-umschalten () ()
	    "Schaltet den i2p-Dienst um zwischen eingeschaltet und ausgeschaltet"
	    (case *i2p-zustand*
	      ((eingeschaltet)
	       (or (and (y-or-n-p "Soll i2p ausgeschaltet werden? ")
			(setq *i2p-zustand* 'ausgeschaltet)
			(run-shell-command "i2prouter stop")
			(message "i2p ist ausgeschaltet worden."))
		   (message "i2p ist NICHT ausgeschaltet worden.")))
	      (otherwise
	       (setq *i2p-zustand* 'eingeschaltet)
	       (run-shell-command "i2prouter start")
	       (message "i2p ist eingeschaltet worden."))))

(defcommand imdb-suche (suche)
  ((:string "Suche in der Internet Movie Database nach: "))
  "Dient zur Suche in der IMDB per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://imdb.com/find?q=" suche)))

(defcommand ixquick (suche)
  ((:string "Suche in IxQuick nach: "))
  "Dient zur Suche bei IxQuick per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://ixquick.com/do/metasearch.pl?query=" suche)))

(defcommand man (man) ((:string "Manual: "))
	    "Sucht nach einem Befehl in den Manual-Seiten"
	    (run-shell-command (format nil "~A -e sh -c 'man ~A'" terminal man)))

(defcommand memory-alpha (suche)
  ((:string "Suche in Memory Alpha nach: "))
  "Dient zur Suche in Memory Alpha per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://memory-alpha.org/en/wiki/Special:Search/?search=" suche)))

(defcommand menü () ()
  "menü dient der Abarbeitung der Optionen, die als Menüstruktur-Liste in *start-menü* hinterlegt sind."
  (labels ((pick (options)
                 (let ((selection (stumpwm::select-from-menu
                                   (current-screen) options "")))
                   (cond
                    ((null selection)
                     (throw 'stumpwm::error "Abbruch."))
                    ((stringp (second selection))
                     (second selection))
                    (t
                     (pick (cdr selection)))))))
    (let ((choice (pick *start-menü*)))
      (run-commands choice))))

(defcommand move-focus-warp (dir) ((:direction "Direction:"))
	    "Bewege den Fokus und anschließend die Maus in das Fenster."
	    (move-focus-and-or-window dir)
	    (banish-pointer :window))

(defcommand nachrichten (suche)
  ((:string "Suche in Google News nach: "))
  "Dient zur Suche bei Google News per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://news.google.com/news/search?q=" suche)))

(defcommand news-bbc (suche)
  ((:string "Suche bei BBC News nach: "))
  "Dient zur Suche bei BBC News per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://www.bbc.co.uk/search/news/?q=" suche)))

(defcommand news-guardian (suche)
  ((:string "Suche bei Guardian News nach: "))
  "Dient zur Suche bei Guardian News per Conkeror. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://www.guardian.co.uk/search?q=" suche)))

(defcommand news-register (suche)
  ((:string "Suche bei The Register nach: "))
  "Dient zur Suche bei The Register per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://search.theregister.co.uk/?q=" suche)))

(defcommand open-selection-browser () ()
	    "Öffnet die markierte Webadresse per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
	    (run-shell-command (cat *browser* (get-x-selection))))

(defcommand reinit () ()
	    "Reinitialisierung des Systems"
	    (run-commands "loadrc")
	    (message "Reinitialisierung abgeschlossen"))

(defcommand stackoverflow (suche)
  ((:string "Suche in Stackoverflow nach: "))
  "Dient zur Suche bei Stackoverflow per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://stackoverflow.com/search?q=" suche)))

(defcommand switch-modeline () ()
	    "Schaltet die Modeline ein oder aus"
	    (toggle-mode-line (current-screen) (current-head)))

(defcommand touchpad-umschalten () ()
	    "Schaltet das Touchpad um zwischen eingeschaltet und ausgeschaltet"
	    (case *touchpad-zustand*
	      ((eingeschaltet)
	       (setq *touchpad-zustand* 'ausgeschaltet)
	       (run-shell-command "synclient touchpadoff=1")
	       (banish-pointer)
	       (message "Touchpad ist ausgeschaltet worden."))
	      (otherwise
	       (setq *touchpad-zustand* 'eingeschaltet)
	       (run-shell-command "synclient touchpadoff=0")
	       (message "Touchpad ist eingeschaltet worden.")))) 

(defcommand wikipedia (suche)
  ((:string "Suche in der Wikipedia nach: "))
  "Dient zur Suche in der Wikipedia per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "https://de.wikipedia.org/w/index.php?search=" suche)))

(defcommand youtube-suche (suche)
  ((:string "Suche in Youtube nach: "))
  "Dient zur Suche in Youtube per Browser. Ist dieser bereits geöffnet, so in einem neuen Tab."
  (check-type suche string)
  (nsubstitute #\+ #\Space suche)
  (run-shell-command (cat *browser* "http://www.youtube.com/results?search_query=" suche "&search=Search")))

(defcommand zwitschere (nachricht)
  ((:string "Die zu zwitschernde Mitteilung: "))
  "Dient zum schnellen zwitschern per Twitter via ttytter"
  (check-type nachricht string)
  (run-shell-command (cat "ttytter -status='" (ersetze-teilstring nachricht "<at>" "@") "'")))

;; ========================================================
;; Grafische Programme aufrufen oder zu geöffneten wechseln
;; ========================================================

(neuerbefehl audacious "Starte/wechsle zu Audacious." "audacious" "Audacious")

(neuerbefehl avidemux2_gtk "Starte/wechsle zu Avidemux." "avidemux2_gtk" "Avidemux2_gtk")

(neuerbefehl banshee "Starte/wechsle zum Banshee Medienabspieler." "banshee" "Banshee")

(neuerbefehl brogue "Starte/wechsle zum ansprechenden B-Rogue." "brogue" "Brogue")

(neuerbefehl calibre "Starte/wechsle zur Calibre Ebook-Verwaltung." "calibre" "Calibre")

(neuerbefehl cherrytree "Starte/wechsle zum Cherrytree Wiki." "cherrytree" "Cherrytree")

(neuerbefehl chromium-browser "Starte/wechsle zum Chromium Webbrowser." "chromium-browser" "Chromium-Browser")

(neuerbefehl claws-mail "Starte/wechsle zu Claws-Mail." "claws-mail" "Claws-mail")

(neuerbefehl comix "Starte/wechsle zu Comix." "comix" "Comix")

(neuerbefehl conkeror "Starte/wechsle zum Conkeror Webbrowser." "conkeror" "Conkeror")

(neuerbefehl deluge "Starte/wechsle zu Deluge." "deluge" "Deluge")

(neuerbefehl dwarffortress "Starte/wechsle zu Dwarf Fortress." "/opt/df_linux/df" "Dwarffortress")

(neuerbefehl dwb "Starte/wechsle zum dwb Webbrowser." "dwb" "Dwb")	    

(neuerbefehl emacs "Starte/wechsle zu Emacs." "emacsclient -c -a ''" "Emacs")

(neuerbefehl empathy "Starte/wechsle zu Empathy." "empathy" "Empathy")

(neuerbefehl evince "Starte/wechsle zu Evince." "evince" "Evince")

(neuerbefehl fbreader "Starte/wechsle zum FBreader." "fbreader" "Fbreader")

(neuerbefehl file-roller "Starte/wechsle zu File-Roller." "file-roller" "File-roller")

(neuerbefehl firefox "Starte/wechsle zu Firefox." "firefox" "Firefox")

(neuerbefehl flare "Starte/wechsle zu Flare RPG." "flare" "Flare")

(neuerbefehl focuswriter "Starte/wechsle zu Focuswriter." "focuswriter" "Focuswriter")

(neuerbefehl geeqie "Starte/wechsle zum Geekie Bildbetrachter." "geeqie" "Geeqie")

(neuerbefehl gimp "Starte/wechsle zu GIMP." "gimp" "Gimp")

(neuerbefehl gwibber "Starte/wechsle zu Gwibber." "gwibber" "Gwibber")

(neuerbefehl iceweasel "Starte/wechsle zum Iceweasel Webbrowser." "iceweasel" "Iceweasel")

(neuerbefehl idle-python3.2 "Starte/wechsle zu Idle in der Python 3.2 Fassung." "idle-python3.2" "Idle-python3.2")

(neuerbefehl jumanji "Starte/wechsle zum Jumanji Webbrowser." "jumanji" "Jumanji")	    

(neuerbefehl kaffeine "Starte/wechsle zu Kaffeine." "kaffeine" "Kaffeine")

(neuerbefehl keepassx "Starte/wechsle zu KeePassX." "keepassx" "Keepassx")

(neuerbefehl minitube "Starte/wechsle zu Minitube." "minitube" "Minitube")

(neuerbefehl nautilus "Starte/wechsle zum Nautilus Dateimanager." "nautilus --no-desktop" "Nautilus")

(neuerbefehl nm-connection-editor "Starte/wechsle zum Networkmanager Verbindungseditor." "nm-connection-editor" "Nm-connection-editor")

(neuerbefehl nitrogen "Starte/wechsle zu Nitrogen." "nitrogen" "Nitrogen")

(neuerbefehl okular "Starte/wechsle zum Okular PDF-Betrachter." "okular" "Okular")

(neuerbefehl palapeli "Starte/wechsle zu Palapeli." "palapeli" "Palapeli")

(neuerbefehl pouetChess "Starte/wechsle zu Pouetchess 3Dxp." "pouetChess" "pouetChess")

(neuerbefehl pychess "Starte/wechsle zu PyChess Staunton." "pychess" "pychess")

(neuerbefehl ristretto "Starte/wechsle zu Ristretto." "ristretto" "Ristretto")

(neuerbefehl rhythmbox "Starte/wechsle zu Rhythmbox." "rhythmobox" "Rhythmbox")

(neuerbefehl scid "Starte/wechsle zu Scid vs. PC." "scid" "Scid")

(neuerbefehl scribus "Starte/wechsle zu Scribus." "scribus" "Scribus")

(neuerbefehl software-center "Starte/wechsle zum Ubuntu Software-Center." "software-center" "Software-center")

(neuerbefehl surf "Starte/wechsle zu Surf." "surf" "surf")

(neuerbefehl thunderbird "Starte/wechsle zu Thunderbird Emailclient." "thunderbird" "Thunderbird")

(neuerbefehl turpial "Starte/wechsle zu Turpial." "turpial" "Turpial")

(neuerbefehl ubuntuone-control-panel-qt "Starte/wechsle zum UbuntuOne Steuerpult." "ubuntuone-control-panel-qt" "Ubuntuone-control-panel-qt")

(neuerbefehl unison-gtk "Starte/wechsle zu Unison." "unison-gtk" "Unison-gtk")

(neuerbefehl update-manager "Starte/wechsle zum Software Update-Manager" "update-manager" "Update-manager")

(neuerbefehl userterminal "Starte/wechsle zum Userterminal." *uxt* "Userterminal")

(neuerbefehl uxt-neu "Starte ein neues UXTerminal." *uxt-neu* "UXTerminal")

(neuerbefehl uzbl-browser "Starte/wechsle zu Uzbl." "uzbl-browser" "Uzbl-core")

(neuerbefehl vlc "Starte/wechsle zu VideoLanClient." "vlc" "Vlc")

(neuerbefehl vym "Starte/wechsle zu ViewYourMind." "vym" "Vym")

(neuerbefehl worldofpadman "Starte/wechsle zu World of Padman." "worldofpadman" "Worldofpadman")

(neuerbefehl xarchiver "Starte/wechsle zu X-Archiver." "xarchiver" "Xarchiver")

(neuerbefehl xchat "Starte/wechsle zu X-Chat." "xchat" "Xchat")

(neuerbefehl zathura "Starte/wechsle zu Zathura." "zathura" "Zathura")

;; ===================================================================
;; Programme in einem eigenen Terminal starten oder zu diesem wechseln
;; ===================================================================

(neuerterminalbefehl abook "Starte/wechsle zu Abook." "abook" "Abook")

(neuerterminalbefehl adminterminal "Starte/wechsle zum Adminterminal." "sudo -i" "Adminterminal" "gainsboro" "OrangeRed")

(neuerterminalbefehl aliensrl "Starte/wechsle zu AliensRL." "aliensrl" "Aliensrl")

(neuerterminalbefehl alsamixer "Starte/wechsle zum Alsa-Mixer." "alsamixer" "Alsamixer")

(neuerterminalbefehl byobu "Starte/wechsle zum Byobu-Terminal." "byobu" "Byobu" "gainsboro" "DarkSlateGray")

(neuerterminalbefehl crawl "Starte/wechsle zu Crawl." "crawl" "Crawl")

(neuerterminalbefehl doomrl "Starte/wechsle zu DoomRL." "doomrl" "Doomrl")

(neuerterminalbefehl htop "Starte/wechsle zu Htop." "htop" "Htop" "BlanchedAlmond" "MidnightBlue")

(neuerterminalbefehl mathomatic "Starte/wechsle zu Mathomatic." "mathomatic" "Mathomatic")

(neuerterminalbefehl mc "Starte/wechsle zum Midnight Commander." "mc" "Mc")

(neuerterminalbefehl mocp "Starte/wechsle zu Music on Console." "mocp" "Mocp")

(neuerterminalbefehl moria "Starte/wechsle zu Moria." "moria" "Moria")

(neuerterminalbefehl mutt "Starte/wechsle zu mutt." "mutt" "Mutt")

(neuerterminalbefehl primerl "Starte/wechsle zu PrimeRL." "primerl" "Primerl")

(neuerterminalbefehl rogue "Starte/wechsle zu Rogue." "rogue" "Rogue")

(neuerterminalbefehl telecomix "Starte/wechsle zu Telecomix." "telecomix" "Telecomix")

(neuerterminalbefehl ttytter "Starte/wechsle zu ttytter." "ttytter -ansi" "Ttytter" "lavender" "NavyBlue")

(neuerterminalbefehl wicd-curses "Starte/wechsle zu WICD (curses)." "wicd-curses" "Wicd")

(neuerterminalbefehl xorcurses "Starte/wechsle zu Xorcurses." "xorcurses" "Xorcurses")

(neuerterminalbefehl zork1 "Starte/wechsle zu Zork 1." "zork1" "Zork1")

(neuerterminalbefehl zork2 "Starte/wechsle zu Zork 2." "zork2" "Zork2")

(neuerterminalbefehl zork3 "Starte/wechsle zu Zork 3." "zork3" "Zork3")

;; ======================================
;; Neuere Tasten - nach eigenem Gutdünken
;; ======================================
;; Übersicht zu den Zusatztasten:
;; M-s = ALT+SUPER
;; s- = SUPER
;; S- = SHIFT
;; C- = Control/STRG
;; H- = ALT-GR
;; ======================================

;; --------------------------------------------------------------------
;; Zusätzliche Optionen für die emacs-artige Tastenbedienung mit Präfix
;; --------------------------------------------------------------------

(tastaturbelegung *root-map*
		  ("Print" "exec scrot -d 5 -e 'mv $f ~/Bilder/Bildschirmfotos/ 2>/dev/null'")
		  ("RET" "userterminal")
		  ("S-RET" "uxt-neu")
		  ("M-RET" "fullscreen")
		  ("C-RET" "adminterminal")
		  ("DEL" "repack-window-numbers")
		  ("C-!" "ausführen-im-terminal")
		  ("I" "show-window-properties")
		  ("P" "exec dmenu_run ")
		  ("," "switch-modeline")
		  ("C-b" "byobu")
		  ("c" "byobu")
		  ("C" "commands")
		  ("M-c" "userterminal")
		  ("M-C" "uxt-neu")
		  ("C-c" "adminterminal")
		  ("C-d" "debuggen-umschalten")
		  ;; Die fehlenden Features auch in der root-map anlegen
		  ("C-SPC" "other")
		  ("M-SPC" "gother")
		  ("S-SPC" "pull-marked")
		  ("Pause" "windowlist")
		  ("C-Pause" "grouplist")
		  ("M-Left" "gprev")
		  ("M-Right" "gnext")
		  ("M-S-Left" "gprev-with-window")
		  ("M-S-Right" "gnext-with-window")
		  ;; Features umbiegen
		  )

;; --------------------------------------------------------------------
;; Zusätzliche Optionen für die emacs-artige Tastenbedienung mit Präfix
;; - Fehlende Features in der groups-map                              -
;; --------------------------------------------------------------------

(tastaturbelegung *groups-map*
		  ("C" "gnew-float")
		  )
(dotimes (i 9)
  (define-key *groups-map* (kbd (format nil "~A" (1+ i)))
    (format nil "gselect-oder-gnew ~A" (1+ i))))

;; ---------------------------------------------------------------------
;; Zusätzliche Optionen für die emacs-artige Tastenbedienung mit Präfix
;; - Die Tastenanbindung für meine Zusatzmenüs                         -
;; ---------------------------------------------------------------------

(tastaturbelegung *root-map*
		  ("u" "menü")
		  ("x" '*programmstart-map*)
		  ("y" '*websuche-map*)
		  ("X" '*erholung-map*)
		  ("." "menü")
		  )

(tastaturbelegung *top-map*
		  ("s-u" "menü")
		  ("s-x" '*programmstart-map*)
		  ("s-y" '*websuche-map*)
		  ("s-X" '*erholung-map*)
		  ("s-." "menü")
		  )

;; --------------------------------------------------------------------------------------
;; Zusätzliche Optionen für einen Direkttastenmodus, wie ihn andere Fenstermanager nutzen
;; - wird von mir nicht mehr genutzt, jedoch gepflegt                                   -                                                    -
;; --------------------------------------------------------------------------------------

(tastaturbelegung *top-map*
		  ;;; Fenster-Verhalten dwm-like
		  ("s-Left" "move-focus-warp left")
		  ("s-S-Left" "move-window left")
		  ("s-Right" "move-focus-warp right")
		  ("s-S-Right" "move-window right")
		  ("s-Up" "move-focus-warp up")
		  ("s-S-Up" "move-window up")
		  ("s-Down" "move-focus-warp down")
		  ("s-S-Down" "move-window down")
		  ("C-s-Left" "pull-hidden-previous")
		  ("C-s-Right" "pull-hidden-next")
		  ("C-s-Up" "mark")
		  ("C-s-Down" "pull-marked")
		  ;; Durch Fenster wechseln - dwm-like
		  ("s-Tab" "next-in-frame")
		  ("s-ISO_Left_Tab" "prev-in-frame")     ;; Erinnerung: Das ist  Shift-Tab
		  ;; Gruppen-Verhalten ist dwm-like
		  ("M-s-Left" "gprev")
		  ("M-s-Right" "gnext")
		  ("M-S-s-Left" "gprev-with-window")
		  ("M-S-s-Right" "gnext-with-window")
		  ("s-SPC" "pull-hidden-next")
		  ("C-s-SPC" "other")
		  ("M-s-SPC" "gother")
		  ("S-s-SPC" "pull-marked")
		  ("Pause" "windowlist")
		  ("C-Pause" "grouplist")
		  ;; Nachbildung der vordefinierten StumpWM-Tasten als Direkttasten
		  ("s-RET" "userterminal")
		  ("S-RET" "uxt-neu")
		  ("M-s-RET" "fullscreen")
		  ("C-s-RET" "adminterminal")
		  ("s-;" "colon")
		  ("s-:" "eval")
		  ("s-!" "exec")
		  ("s-C-!" "ausführen-im-terminal")
		  ("s-#" "mark")
		  ("s--" "fclear")
		  ("s-+" "balance-frames")
		  ("s-\"" "select")
		  ("s-'" "windowlist")
		  ("s-," "switch-modeline")
		  ("s-a" "time")
		  ("s-A" "title")
		  ("s-b" "banish")
		  ("C-s-b" "byobu")
		  ("s-c" "userterminal")
		  ("s-C" "commands")
		  ("C-s-c" "Adminterminal")
		  ("C-s-d" "debuggen-umschalten")
		  ("s-e" "emacs")
		  ("s-f" "fselect")
		  ("s-F" "curframe")
		  ("s-g" *groups-map*)
		  ("s-G" "vgroups")
		  ("s-h" *help-map*)
		  ("s-i" "info")
		  ("s-I" "show-window-properties")
		  ("s-k" "delete")
		  ("s-K" "kill")
		  ("s-l" "exec xflock4")
		  ("s-L" "loadrc")
		  ("s-m" "lastmsg")
		  ("s-n" "pull-hidden-next")
		  ("M-s-N" "next")
		  ("C-s-n" "next-in-frame")
		  ("C-s-N" "number")
		  ("s-o" "fnext")
		  ("s-p" "pull-hidden-previous")
		  ("s-P" "prev")
		  ("C-s-p" "prev-in-frame")
		  ("s-Q" "only")
		  ("s-r" "iresize")
		  ("s-R" "remove")
		  ("s-s" "vsplit")
		  ("s-S" "hsplit")
		  ("s-t" "send-escape")
		  ("s-u" "next-urgent")
		  ("s-v" "version")
		  ("s-w" "windows")
		  ("s-W" "place-existing-windows")
		  ;; Programme starten
		  ("Print" "exec scrot -e 'mv $f ~/Bilder/Bildschirmfotos/ 2>/dev/null'")
		  ("XF86HomePage" *browser*)
		  ("XF86Mail" "thunderbird")
		  ("XF86Calculator" "speedcrunch")
		  ("XF86AudioRaiseVolume" "exec amixer set Master 5%+ unmute")
		  ("XF86AudioLowerVolume" "exec amixer set Master 5%- unmute")
		  ("XF86AudioMute" "exec amixer set Master toggle")
		  ("M-s-a" "alsamixer")
		  ("M-s-A" "abook ")
		  ("M-s-b" "banshee")
		  ("M-s-c" "conkeror")
		  ("M-s-C" "chromium-browser")
		  ("M-s-d" "deluge")
		  ("M-s-D" "dropbox-umschalten")
		  ("M-s-e" "evince")
		  ("M-s-f" "firefox")
		  ("M-s-F" "focuswriter")
		  ("M-s-g" "geeqie")
		  ("M-s-G" "gimp")
		  ("M-s-i" "exec iscan")
		  ("M-s-I" "i2p-umschalten")
		  ("M-s-j" "jumanji")
		  ("M-s-k" "keepassx")
		  ("M-s-K" "kaffeine")
		  ("M-s-m" "mc")
		  ("M-s-M" "mocp")
		  ("C-s-m" "minitube")
		  ("C-s-M" "mathomatic")
		  ("M-s-n" "nautilus")
		  ("M-s-N" "nitrogen")
		  ("M-s-o" "okular")
		  ("M-s-p" "exec dmenu_run ")
		  ("M-s-r" "ristretto")
		  ("M-s-R" "reinit")
		  ("M-s-s" "scribus")
		  ("M-s-S" "surf")
		  ("M-s-t" "thunderbird")
		  ("M-s-T" "turpial")
		  ("M-C-s-t" "ttytter")
		  ("M-s-u" "unison-gtk")
		  ("M-s-v" "vlc")
		  ("M-s-V" "vym")
;		  ("M-s-w" "wicd-curses ")
		  ("M-s-x" "xchat")
		  ("M-s-X" "xarchiver")
		  ("M-s-y" "touchpad-umschalten")
		  ("M-s-z" "zathura")
		  ;; Websuchen
		  ("C-s-a" "askubuntu")
		  ("C-s-b" "news-bbc")
		  ("C-s-d" "ddg")
		  ("C-s-g" "google")
		  ("C-s-G" "news-guardian")
		  ("C-s-h" "hackernews")
		  ("C-s-i" "ixquick")
		  ("C-s-I" "imdb-suche")
		  ("C-s-m" "google+mitteilungen")
		  ("C-s-M" "memory-alpha")
		  ("C-s-n" "nachrichten")
		  ("C-s-o" "open-selection-browser") ;; öffnet den markierten Link im Webbrowser
		  ("C-s-p" "google+profile")
		  ("C-s-r" "news-register")
		  ("C-s-s" "stackoverflow")
		  ("C-s-u" "browse-url")
		  ("C-s-w" "wikipedia")
		  ("C-s-y" "youtube-suche")
		  ("C-s-z" "zwitschere")
		  )

;; Zu einer anderen Gruppe wechseln, erschaffen wenn sie nicht vorhanden ist
(dotimes (i 9)
  (define-key *top-map* (kbd (format nil "M-s-~A" (1+ i)))
    (format nil "gselect-oder-gnew ~A" (1+ i))))

;; Fenster anhand seiner Nummer auswählen
(dotimes (i 10)
  (define-key *top-map* (kbd (format nil "M-S-s-~A" i))
    (format nil "select-window-by-number ~A" i)))

;;; ==========================================================
;;; GRUPPEN - für Umsteiger von anderen Tiling Fenstermanagern
;;; ==========================================================

;; VORSICHT! Der Gruppenteil ist seit einem Jahr nicht mehr gepflegt worden!

;(run-commands ; Erzeugt die Gruppen
;      "grename Standard"
;      "gnewbg Emacs"
;      "gnewbg WWW"
;      "gnewbg Arbeiten"
;      "gnewbg Media"
;      "gnewbg Erholung"
;      "gnewbg System"
;      )

;(define-frame-preference "Standard"
;  (0 t   t :instance "xterm")
;  (0 t   t :class "UXTerm")
;  (0 t   t :class "st-256color")
;  (0 t   t :class "URxvt")
;  )

;(define-frame-preference "Emacs"
;  (0 t   t :title "emacs")
;  )

;(define-frame-preference "WWW"
;  ;; frame raise lock (lock AND raise == jumpto)
;  (0 t   t :class "Claws-mail")  
;  (0 t   t :class "Conkeror")
;  (0 t   t :class "Deluge")
;  (0 t   t :class "Firefox")
;  (0 t   t :class "surf")
;  (0 t   t :class "Turpial")
;  (0 t   t :class "Uzbl-core")
;  (0 t   t :class "Xchat")
;  )

;(define-frame-preference "Arbeiten"
;  ;; frame raise lock (lock AND raise == jumpto)
;  (0 t   t :class "Gvim")
;  (0 t   t :class "Focuswriter")
;  (0 t   t :class "libreoffice-startcenter")
;  (0 t   t :class "libreoffice-writer")
;  (0 t   t :class "libreoffice-calc")
;  (0 t   t :class "libreoffice-impress")
;  (0 t   t :class "libreoffice-draw")
;  (0 t   t :class "libreoffice-math")
;  (0 t   t :class "Okular")
;  (0 t   t :class "Pyroom")
;  (0 t   t :class "Zathura")
;  )

;(define-frame-preference "Media"
;  ;; frame raise lock (lock AND raise == jumpto)
;  (0 t   t :instance "aumix")
;  (0 t   t :class "Audacious")
;  (0 t   t :class "Avidemux")  
;  (0 t   t :class "Geeqie")
;  (0 t   t :class "Gimp")
;  (0 t   t :class "Iscan")
;  (0 t   t :class "K3b")
;  (0 t   t :class "Kaffeine")
;  (0 t   t :class "Comixq")
;  (0 t   t :class "Minitube")  
;  (0 t   t :class "MPlayer")  
;  (0 t   t :class "Ristretto") 
;  (0 t   t :class "tvbrowser-TVBrowser")
;  (0 t   t :class "Vlc")
;  )

;(define-frame-preference "Erholung"
;  ;; frame raise lock (lock AND raise == jumpto)
;  (0 t   t :class "Angband")
;  (0 t   t :class "ASCIIpOrtal")
;  (0 t   t :class "Desmume-glade")
;  (0 t   t :class "Desmume")
;  (0 t   t :class "Dwarf_Fortress")
;  (0 t   t :class "Dwarftherapist")
;  (0 t   t :class "flands-FLApp")
;  (0 t   t :class "flare.bin")
;  (0 t   t :class "Gvbam")
;  (0 t   t :class "net-minecraft-MinecraftLauncher")
;  (0 t   t :class "russotto-zplet-ZJApp")
;  (0 t   t :class "Palapelli")
;  (0 t   t :class "Scid")
;  (0 t   t :title "SuperTuxKart")
;  (0 t   t :title "t-engine")
;  (0 t   t :title "tome")
;  (0 t   t :class "warmux")
;  (0 t   t :class "wesnoth")
;  (0 t   t :class "widelands")
;  )

;(define-frame-preference "System"
; ;; frame raise lock (lock AND raise == jumpto)
;  (0 t   t :class "Keepassx")
;  (0 t   t :class "Gpg-crypter")
;  (0 t   t :class "Nitrogen")
;  (0 t   t :class "Thunar")
;  (0 t   t :class "Unison-gtk2")
;  (0 t   t :class "Xarchiver")
;  )


(defun echo-urgent-window (target)
  "(echo-urgent-window (target)
ECHO-URGENDT-WINDOW teilt mit, welches Fenster uns dringend benötigt."
  (message-no-timeout "~a hat eine Nachricht für dich." (window-title target)))

;;; =====
;;; Hooks
;;; =====

(add-hook *urgent-window-hook* 'echo-urgent-window)

;; =========================================
;; für aktive Programmierzyklen - SWANK
;; -----------------------------------------
;; Aufruf mittels M-x slime-connect in Emacs
;; =========================================
;(when *initializing*
;  (require 'swank)
;  (swank:create-server :dont-close t))


